struct Node~T~ {
    data : T;
    next : Node~T~;
}

struct LinkedList~T~ {
    head : Node~T~;
    length : int;
}

func insert~T~(ll LinkedList~T~, data T) void {
    let n = Node~T~{
        data = data;
        next = ll.head;
    };
    ll.head = n;
    ll.length = ll.length + 1;
}
func insert_end~T~(ll LinkedList~T~, data T) void {
    let n = Node~T~{
        data = data;
    };
    if (ll.head == null) {
        ll.head = n;
    } else {
        let current = ll.head;
        while (current.next != null) {
            current = current.next;
        }
        current.next = n;
    }
    ll.length = ll.length + 1;
}
func insert_at~T~(ll LinkedList~T~, data T, idx int) void {
    if (idx > ll.length) {
        println "Can't insert data into index";
    } else {
        if (idx == 0) {
            insert~T~(ll, data);
        } else {
            let n = Node~T~{
                data = data;
            };
            let current = ll.head;
            let i = 0;
            while (i < (idx - 1)) {
                current = current.next;
                i = i + 1;
            }
            n.next = current.next;
            current.next = n;
            ll.length = ll.length + 1;
        }
    }
}

func remove_head~T~(ll LinkedList~T~) Node~T~ {
    if (ll.head != null) {
        let temp = ll.head;
        ll.head = temp.next;

        temp.next = null;
        ll.length = ll.length - 1;
        return temp;
    } else {
        println "Linked List is empty";
        return null;
    }
}
func remove_tail~T~(ll LinkedList~T~) Node~T~ {
    if (ll.head != null) {
        let current = ll.head;
        ll.length = ll.length - 1;
        if (current.next != null) {
            let next = current.next;
            while (next.next != null) {
                current = current.next;
                next = current.next;
            }
            current.next = null;
            return next;
        } else {
            ll.head = null;
            return current;
        }
    } else {
        println "Linked List is empty";
        return null;
    }
}
func remove_at~T~(ll LinkedList~T~, idx int) Node~T~ {
    if (ll.head != null) {
        if (idx == 0) {
            return remove_head~T~(ll);
        } else {
            if (idx == ll.length) {
                return remove_tail~T~(ll);
            } else {
                let current = ll.head;
                let i = 0;
                while (i < idx - 1) {
                    current = current.next;
                    i = i + 1;
                }
                let temp = current.next;
                current.next = temp.next;
                temp.next = null;
                ll.length = ll.length - 1;
                return temp;
            }
        }
    } else {
        println "Linked List is empty";
        return null;
    }
}
func empty~T~(ll LinkedList~T~) void {
    while (ll.head != null) {
        remove_tail~T~(ll);
    }
}

func traverse~T~(ll LinkedList~T~) void {
    if (ll.head != null) {
        let current = ll.head;
        while (current.next != null) {
            print current.data;
            print " -> ";
            current = current.next;
        }
        println current.data;
    } else {
        println "Linked List is empty";
    }
}

func main() void {
    let ll = LinkedList~int~{
        length = 0;
    };
    traverse~int~(ll);
    let i = 0;
    while (i <= 100) {
        insert_end~int~(ll, i);
        i = i + 1;
    }
    traverse~int~(ll);
    println "Remove all";
    empty~int~(ll);
    traverse~int~(ll);
    let lls = LinkedList~string~{
        length = 0;
    };
    traverse~string~(lls);
    insert~string~(lls, "a");
    insert_at~string~(lls, "b", 1);
    insert_end~string~(lls, "c");
    traverse~string~(lls);
}