prog: FUNC ID LPAREN ID T_BOOL COMMA WHILE
##
## Ends in an error in state: 14.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN ID T_BOOL WHILE
##
## Ends in an error in state: 13.
##
## separated_nonempty_list(COMMA,param) -> param . [ RPAREN ]
## separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN ID WHILE
##
## Ends in an error in state: 4.
##
## param -> ID . T_INT [ RPAREN COMMA ]
## param -> ID . T_BOOL [ RPAREN COMMA ]
## param -> ID . T_CHAR [ RPAREN COMMA ]
## param -> ID . T_STRING [ RPAREN COMMA ]
## param -> ID . T_VOID [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_BOOL LBRACE RBRACE WHILE
##
## Ends in an error in state: 108.
##
## list(func) -> func . list(func) [ EOF ]
##
## The known suffix of the stack is as follows:
## func
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_BOOL WHILE
##
## Ends in an error in state: 103.
##
## func -> FUNC ID params T_BOOL . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params T_BOOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_CHAR WHILE
##
## Ends in an error in state: 101.
##
## func -> FUNC ID params T_CHAR . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params T_CHAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_INT WHILE
##
## Ends in an error in state: 99.
##
## func -> FUNC ID params T_INT . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params T_INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_STRING WHILE
##
## Ends in an error in state: 97.
##
## func -> FUNC ID params T_STRING . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params T_STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID EQUALS INT WHILE
##
## Ends in an error in state: 86.
##
## assignment -> ID EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID EQUALS WHILE
##
## Ends in an error in state: 85.
##
## assignment -> ID EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LPAREN INT COMMA WHILE
##
## Ends in an error in state: 42.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LPAREN INT WHILE
##
## Ends in an error in state: 31.
##
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 92.
##
## stmt -> function_call . SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## function_call
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LPAREN WHILE
##
## Ends in an error in state: 26.
##
## function_call -> ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID WHILE
##
## Ends in an error in state: 84.
##
## assignment -> ID . EQUALS expr [ SEMICOLON ]
## function_call -> ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN INT BEQUALS ID RPAREN LBRACE RBRACE ELSE WHILE
##
## Ends in an error in state: 82.
##
## stmt -> IF LPAREN condition RPAREN block ELSE . block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN block ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN INT BEQUALS ID RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 81.
##
## stmt -> IF LPAREN condition RPAREN block . ELSE block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN INT BEQUALS ID RPAREN WHILE
##
## Ends in an error in state: 80.
##
## stmt -> IF LPAREN condition RPAREN . block ELSE block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN WHILE
##
## Ends in an error in state: 78.
##
## stmt -> IF LPAREN . condition RPAREN block ELSE block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF WHILE
##
## Ends in an error in state: 77.
##
## stmt -> IF . LPAREN condition RPAREN block ELSE block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID EQUALS INT WHILE
##
## Ends in an error in state: 74.
##
## declaration -> ID EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID EQUALS WHILE
##
## Ends in an error in state: 73.
##
## declaration -> ID EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID T_BOOL WHILE
##
## Ends in an error in state: 75.
##
## stmt -> LET declaration . SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## LET declaration
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID WHILE
##
## Ends in an error in state: 67.
##
## declaration -> ID . EQUALS expr [ SEMICOLON ]
## declaration -> ID . T_INT [ SEMICOLON ]
## declaration -> ID . T_BOOL [ SEMICOLON ]
## declaration -> ID . T_CHAR [ SEMICOLON ]
## declaration -> ID . T_STRING [ SEMICOLON ]
## declaration -> ID . T_VOID [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET WHILE
##
## Ends in an error in state: 66.
##
## stmt -> LET . declaration SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PASS SEMICOLON T_VOID
##
## Ends in an error in state: 90.
##
## list(line) -> line . list(line) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## line
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PASS WHILE
##
## Ends in an error in state: 64.
##
## stmt -> PASS . SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## PASS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PRINT INT WHILE
##
## Ends in an error in state: 62.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## stmt -> PRINT expr . SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## PRINT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PRINT WHILE
##
## Ends in an error in state: 61.
##
## stmt -> PRINT . expr SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## PRINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN INT DIV WHILE
##
## Ends in an error in state: 38.
##
## expr -> expr DIV . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN INT MINUS WHILE
##
## Ends in an error in state: 40.
##
## expr -> expr MINUS . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN INT MOD WHILE
##
## Ends in an error in state: 36.
##
## expr -> expr MOD . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN INT PLUS WHILE
##
## Ends in an error in state: 34.
##
## expr -> expr PLUS . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN INT TIMES WHILE
##
## Ends in an error in state: 32.
##
## expr -> expr TIMES . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN INT WHILE
##
## Ends in an error in state: 59.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## stmt -> RETURN expr . SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LPAREN INT WHILE
##
## Ends in an error in state: 44.
##
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> LPAREN expr . RPAREN [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LPAREN WHILE
##
## Ends in an error in state: 22.
##
## expr -> LPAREN . expr RPAREN [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN WHILE
##
## Ends in an error in state: 58.
##
## stmt -> RETURN . expr SEMICOLON [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE T_VOID
##
## Ends in an error in state: 19.
##
## block -> LBRACE . list(line) RBRACE [ WHILE RETURN RBRACE PRINT PASS LET IF ID FUNC EOF ELSE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT BEQUALS ID RPAREN WHILE
##
## Ends in an error in state: 56.
##
## stmt -> WHILE LPAREN condition RPAREN . block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN condition RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT BEQUALS INT WHILE
##
## Ends in an error in state: 54.
##
## condition -> expr BEQUALS expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr BEQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT BEQUALS WHILE
##
## Ends in an error in state: 53.
##
## condition -> expr BEQUALS . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr BEQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT BNEQUALS INT WHILE
##
## Ends in an error in state: 52.
##
## condition -> expr BNEQUALS expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr BNEQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT BNEQUALS WHILE
##
## Ends in an error in state: 51.
##
## condition -> expr BNEQUALS . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr BNEQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT GT INT WHILE
##
## Ends in an error in state: 50.
##
## condition -> expr GT expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT GT WHILE
##
## Ends in an error in state: 49.
##
## condition -> expr GT . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT LT INT WHILE
##
## Ends in an error in state: 48.
##
## condition -> expr LT expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT LT WHILE
##
## Ends in an error in state: 47.
##
## condition -> expr LT . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN INT WHILE
##
## Ends in an error in state: 46.
##
## condition -> expr . BEQUALS expr [ RPAREN ]
## condition -> expr . BNEQUALS expr [ RPAREN ]
## condition -> expr . GT expr [ RPAREN ]
## condition -> expr . LT expr [ RPAREN ]
## expr -> expr . DIV expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . TIMES expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . PLUS expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . MINUS expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . MOD expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 21.
##
## stmt -> WHILE LPAREN . condition RPAREN block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE WHILE
##
## Ends in an error in state: 20.
##
## stmt -> WHILE . LPAREN condition RPAREN block [ WHILE RETURN RBRACE PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID WHILE
##
## Ends in an error in state: 18.
##
## func -> FUNC ID params T_VOID . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params T_VOID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 17.
##
## func -> FUNC ID params . T_INT block [ FUNC EOF ]
## func -> FUNC ID params . T_BOOL block [ FUNC EOF ]
## func -> FUNC ID params . T_CHAR block [ FUNC EOF ]
## func -> FUNC ID params . T_STRING block [ FUNC EOF ]
## func -> FUNC ID params . T_VOID block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN WHILE
##
## Ends in an error in state: 3.
##
## params -> LPAREN . param_list RPAREN [ T_VOID T_STRING T_INT T_CHAR T_BOOL ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID WHILE
##
## Ends in an error in state: 2.
##
## func -> FUNC ID . params T_INT block [ FUNC EOF ]
## func -> FUNC ID . params T_BOOL block [ FUNC EOF ]
## func -> FUNC ID . params T_CHAR block [ FUNC EOF ]
## func -> FUNC ID . params T_STRING block [ FUNC EOF ]
## func -> FUNC ID . params T_VOID block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC WHILE
##
## Ends in an error in state: 1.
##
## func -> FUNC . ID params T_INT block [ FUNC EOF ]
## func -> FUNC . ID params T_BOOL block [ FUNC EOF ]
## func -> FUNC . ID params T_CHAR block [ FUNC EOF ]
## func -> FUNC . ID params T_STRING block [ FUNC EOF ]
## func -> FUNC . ID params T_VOID block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

