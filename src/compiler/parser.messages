prog: FUNC ID LPAREN ID T_VOID COMMA WHILE
##
## Ends in an error in state: 47.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN ID T_VOID SEMICOLON
##
## Ends in an error in state: 46.
##
## separated_nonempty_list(COMMA,param) -> param . [ RPAREN ]
## separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 6, spurious reduction of production any_type -> T_VOID 
## In state 42, spurious reduction of production param -> ID any_type 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN ID WHILE
##
## Ends in an error in state: 41.
##
## param -> ID . any_type [ RPAREN COMMA ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN STRUCT_ID LSQUARE WHILE
##
## Ends in an error in state: 25.
##
## array_type -> STRUCT_ID LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT_ID LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN STRUCT_ID WHILE
##
## Ends in an error in state: 24.
##
## any_type -> STRUCT_ID . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> STRUCT_ID . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## STRUCT_ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_BOOL LSQUARE WHILE
##
## Ends in an error in state: 22.
##
## array_type -> T_BOOL LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_BOOL LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_BOOL WHILE
##
## Ends in an error in state: 21.
##
## any_type -> T_BOOL . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> T_BOOL . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_BOOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_CHAR LSQUARE WHILE
##
## Ends in an error in state: 19.
##
## array_type -> T_CHAR LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_CHAR LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_CHAR WHILE
##
## Ends in an error in state: 18.
##
## any_type -> T_CHAR . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> T_CHAR . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_CHAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_FLOAT LSQUARE WHILE
##
## Ends in an error in state: 16.
##
## array_type -> T_FLOAT LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_FLOAT LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_FLOAT WHILE
##
## Ends in an error in state: 15.
##
## any_type -> T_FLOAT . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> T_FLOAT . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_FLOAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_INT LSQUARE WHILE
##
## Ends in an error in state: 13.
##
## array_type -> T_INT LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_INT LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_INT WHILE
##
## Ends in an error in state: 12.
##
## any_type -> T_INT . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> T_INT . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_STRING LSQUARE WHILE
##
## Ends in an error in state: 10.
##
## array_type -> T_STRING LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_STRING LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_STRING WHILE
##
## Ends in an error in state: 9.
##
## any_type -> T_STRING . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> T_STRING . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID DOT WHILE
##
## Ends in an error in state: 121.
##
## identifier -> ID DOT . ID [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE EQUALS DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## ID DOT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID EQUALS STRING WHILE
##
## Ends in an error in state: 180.
##
## assignment -> identifier EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## identifier EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID EQUALS WHILE
##
## Ends in an error in state: 179.
##
## assignment -> identifier EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## identifier EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LPAREN STRING RSQUARE
##
## Ends in an error in state: 116.
##
## function_call -> ID LPAREN loption(separated_nonempty_list(COMMA,expr)) . RPAREN [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## ID LPAREN loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 118, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 115, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LPAREN WHILE
##
## Ends in an error in state: 114.
##
## function_call -> ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LSQUARE FLOAT RSQUARE EQUALS STRING WHILE
##
## Ends in an error in state: 186.
##
## array_assign -> array_access EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## array_access EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LSQUARE FLOAT RSQUARE EQUALS WHILE
##
## Ends in an error in state: 185.
##
## array_assign -> array_access EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## array_access EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LSQUARE FLOAT RSQUARE WHILE
##
## Ends in an error in state: 184.
##
## array_assign -> array_access . EQUALS expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## array_access
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LSQUARE STRING WHILE
##
## Ends in an error in state: 97.
##
## array_access -> ID LSQUARE expr . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE EQUALS DIV COMMA BNEQUALS BEQUALS ]
## expr -> expr . DIV expr [ TIMES RSQUARE PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RSQUARE PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RSQUARE PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RSQUARE PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RSQUARE PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## ID LSQUARE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID LSQUARE WHILE
##
## Ends in an error in state: 92.
##
## array_access -> ID LSQUARE . expr RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE EQUALS DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## ID LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID TIMES
##
## Ends in an error in state: 178.
##
## assignment -> identifier . EQUALS expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## identifier
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 91, spurious reduction of production identifier -> ID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE ID WHILE
##
## Ends in an error in state: 91.
##
## array_access -> ID . LSQUARE expr RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE EQUALS DIV COMMA BNEQUALS BEQUALS ]
## function_call -> ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
## identifier -> ID . [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE EQUALS DIV COMMA BNEQUALS BEQUALS ]
## identifier -> ID . DOT ID [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE EQUALS DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN STRING BEQUALS FLOAT RPAREN LBRACE RBRACE ELSE WHILE
##
## Ends in an error in state: 169.
##
## stmt -> IF LPAREN condition RPAREN block ELSE . block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN block ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN STRING BEQUALS FLOAT RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 168.
##
## stmt -> IF LPAREN condition RPAREN block . ELSE block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN STRING BEQUALS FLOAT RPAREN WHILE
##
## Ends in an error in state: 167.
##
## stmt -> IF LPAREN condition RPAREN . block ELSE block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF LPAREN WHILE
##
## Ends in an error in state: 165.
##
## stmt -> IF LPAREN . condition RPAREN block ELSE block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE IF WHILE
##
## Ends in an error in state: 164.
##
## stmt -> IF . LPAREN condition RPAREN block ELSE block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID EQUALS STRING WHILE
##
## Ends in an error in state: 159.
##
## declaration -> ID EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID EQUALS WHILE
##
## Ends in an error in state: 158.
##
## declaration -> ID EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID T_VOID EQUALS STRING WHILE
##
## Ends in an error in state: 162.
##
## declaration -> ID any_type EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## ID any_type EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID T_VOID EQUALS WHILE
##
## Ends in an error in state: 161.
##
## declaration -> ID any_type EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID any_type EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID T_VOID RPAREN
##
## Ends in an error in state: 160.
##
## declaration -> ID any_type . EQUALS expr [ SEMICOLON ]
## declaration -> ID any_type . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID any_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 6, spurious reduction of production any_type -> T_VOID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET ID WHILE
##
## Ends in an error in state: 157.
##
## declaration -> ID . any_type EQUALS expr [ SEMICOLON ]
## declaration -> ID . EQUALS expr [ SEMICOLON ]
## declaration -> ID . any_type [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE LET WHILE
##
## Ends in an error in state: 156.
##
## single_stmt -> LET . declaration [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## LET
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PASS SEMICOLON T_VOID
##
## Ends in an error in state: 176.
##
## list(line) -> line . list(line) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## line
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PASS WHILE
##
## Ends in an error in state: 172.
##
## stmt -> single_stmt . SEMICOLON [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## single_stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PRINT STRING WHILE
##
## Ends in an error in state: 154.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## single_stmt -> PRINT expr . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## PRINT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PRINT WHILE
##
## Ends in an error in state: 153.
##
## single_stmt -> PRINT . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## PRINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PRINTLN STRING WHILE
##
## Ends in an error in state: 152.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## single_stmt -> PRINTLN expr . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## PRINTLN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE PRINTLN WHILE
##
## Ends in an error in state: 151.
##
## single_stmt -> PRINTLN . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## PRINTLN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RBRACE WHILE
##
## Ends in an error in state: 190.
##
## list(func) -> func . list(func) [ EOF ]
##
## The known suffix of the stack is as follows:
## func
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LPAREN STRING WHILE
##
## Ends in an error in state: 123.
##
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> LPAREN expr . RPAREN [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LPAREN WHILE
##
## Ends in an error in state: 88.
##
## expr -> LPAREN . expr RPAREN [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LSQUARE STRING COMMA WHILE
##
## Ends in an error in state: 119.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RSQUARE RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LSQUARE STRING RPAREN
##
## Ends in an error in state: 125.
##
## expr -> LSQUARE loption(separated_nonempty_list(COMMA,expr)) . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LSQUARE loption(separated_nonempty_list(COMMA,expr))
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 118, spurious reduction of production separated_nonempty_list(COMMA,expr) -> expr 
## In state 115, spurious reduction of production loption(separated_nonempty_list(COMMA,expr)) -> separated_nonempty_list(COMMA,expr) 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LSQUARE STRING WHILE
##
## Ends in an error in state: 118.
##
## expr -> expr . DIV expr [ TIMES RSQUARE RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . TIMES expr [ TIMES RSQUARE RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . PLUS expr [ TIMES RSQUARE RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . MINUS expr [ TIMES RSQUARE RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . MOD expr [ TIMES RSQUARE RPAREN PLUS MOD MINUS DIV COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RSQUARE RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RSQUARE RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN LSQUARE WHILE
##
## Ends in an error in state: 87.
##
## expr -> LSQUARE . loption(separated_nonempty_list(COMMA,expr)) RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRING DIV WHILE
##
## Ends in an error in state: 110.
##
## expr -> expr DIV . expr [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRING MINUS WHILE
##
## Ends in an error in state: 112.
##
## expr -> expr MINUS . expr [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRING MOD WHILE
##
## Ends in an error in state: 108.
##
## expr -> expr MOD . expr [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRING PLUS WHILE
##
## Ends in an error in state: 106.
##
## expr -> expr PLUS . expr [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRING TIMES WHILE
##
## Ends in an error in state: 98.
##
## expr -> expr TIMES . expr [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRING WHILE
##
## Ends in an error in state: 150.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## single_stmt -> RETURN expr . [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## RETURN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LBRACE ID EQUALS FLOAT SEMICOLON WHILE
##
## Ends in an error in state: 129.
##
## list(struct_field_init) -> struct_field_init . list(struct_field_init) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## struct_field_init
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LBRACE ID EQUALS STRING WHILE
##
## Ends in an error in state: 127.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## struct_field_init -> ID EQUALS expr . SEMICOLON [ RBRACE ID ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LBRACE ID EQUALS WHILE
##
## Ends in an error in state: 85.
##
## struct_field_init -> ID EQUALS . expr SEMICOLON [ RBRACE ID ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LBRACE ID WHILE
##
## Ends in an error in state: 84.
##
## struct_field_init -> ID . EQUALS expr SEMICOLON [ RBRACE ID ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LBRACE WHILE
##
## Ends in an error in state: 83.
##
## struct_init -> STRUCT_ID LBRACE . list(struct_field_init) RBRACE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## STRUCT_ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LSQUARE INT WHILE
##
## Ends in an error in state: 81.
##
## array_dec -> STRUCT_ID LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## STRUCT_ID LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID LSQUARE WHILE
##
## Ends in an error in state: 80.
##
## array_dec -> STRUCT_ID LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## STRUCT_ID LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN STRUCT_ID WHILE
##
## Ends in an error in state: 79.
##
## array_dec -> STRUCT_ID . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
## struct_init -> STRUCT_ID . LBRACE list(struct_field_init) RBRACE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## STRUCT_ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_BOOL LSQUARE INT WHILE
##
## Ends in an error in state: 77.
##
## array_dec -> T_BOOL LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_BOOL LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_BOOL LSQUARE WHILE
##
## Ends in an error in state: 76.
##
## array_dec -> T_BOOL LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_BOOL LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_BOOL WHILE
##
## Ends in an error in state: 75.
##
## array_dec -> T_BOOL . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_BOOL
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_CHAR LSQUARE INT WHILE
##
## Ends in an error in state: 73.
##
## array_dec -> T_CHAR LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_CHAR LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_CHAR LSQUARE WHILE
##
## Ends in an error in state: 72.
##
## array_dec -> T_CHAR LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_CHAR LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_CHAR WHILE
##
## Ends in an error in state: 71.
##
## array_dec -> T_CHAR . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_CHAR
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_FLOAT LSQUARE INT WHILE
##
## Ends in an error in state: 69.
##
## array_dec -> T_FLOAT LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_FLOAT LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_FLOAT LSQUARE WHILE
##
## Ends in an error in state: 68.
##
## array_dec -> T_FLOAT LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_FLOAT LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_FLOAT WHILE
##
## Ends in an error in state: 67.
##
## array_dec -> T_FLOAT . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_FLOAT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_INT LSQUARE INT WHILE
##
## Ends in an error in state: 65.
##
## array_dec -> T_INT LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_INT LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_INT LSQUARE WHILE
##
## Ends in an error in state: 64.
##
## array_dec -> T_INT LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_INT LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_INT WHILE
##
## Ends in an error in state: 63.
##
## array_dec -> T_INT . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_STRING LSQUARE INT WHILE
##
## Ends in an error in state: 61.
##
## array_dec -> T_STRING LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_STRING LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_STRING LSQUARE WHILE
##
## Ends in an error in state: 60.
##
## array_dec -> T_STRING LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_STRING LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_STRING WHILE
##
## Ends in an error in state: 59.
##
## array_dec -> T_STRING . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_STRING
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_VOID LSQUARE INT RSQUARE LSQUARE INT WHILE
##
## Ends in an error in state: 102.
##
## array_dec -> array_dec LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## array_dec LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_VOID LSQUARE INT RSQUARE LSQUARE WHILE
##
## Ends in an error in state: 101.
##
## array_dec -> array_dec LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## array_dec LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_VOID LSQUARE INT WHILE
##
## Ends in an error in state: 57.
##
## array_dec -> T_VOID LSQUARE INT . RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_VOID LSQUARE INT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_VOID LSQUARE WHILE
##
## Ends in an error in state: 56.
##
## array_dec -> T_VOID LSQUARE . INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_VOID LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN T_VOID WHILE
##
## Ends in an error in state: 55.
##
## array_dec -> T_VOID . LSQUARE INT RSQUARE [ TIMES SEMICOLON RSQUARE RPAREN PLUS MOD MINUS LT LSQUARE LE GT GE DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## T_VOID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE RETURN WHILE
##
## Ends in an error in state: 149.
##
## single_stmt -> RETURN . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## RETURN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE T_VOID
##
## Ends in an error in state: 52.
##
## block -> LBRACE . list(line) RBRACE [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID FUNC EOF ELSE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING BEQUALS FLOAT RPAREN WHILE
##
## Ends in an error in state: 147.
##
## stmt -> WHILE LPAREN condition RPAREN . block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN condition RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING BEQUALS STRING WHILE
##
## Ends in an error in state: 145.
##
## condition -> expr BEQUALS expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr BEQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING BEQUALS WHILE
##
## Ends in an error in state: 144.
##
## condition -> expr BEQUALS . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr BEQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING BNEQUALS STRING WHILE
##
## Ends in an error in state: 143.
##
## condition -> expr BNEQUALS expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr BNEQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING BNEQUALS WHILE
##
## Ends in an error in state: 142.
##
## condition -> expr BNEQUALS . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr BNEQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING GE STRING WHILE
##
## Ends in an error in state: 141.
##
## condition -> expr GE expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr GE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING GE WHILE
##
## Ends in an error in state: 140.
##
## condition -> expr GE . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr GE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING GT STRING WHILE
##
## Ends in an error in state: 139.
##
## condition -> expr GT expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING GT WHILE
##
## Ends in an error in state: 138.
##
## condition -> expr GT . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING LE STRING WHILE
##
## Ends in an error in state: 137.
##
## condition -> expr LE expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr LE expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING LE WHILE
##
## Ends in an error in state: 136.
##
## condition -> expr LE . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr LE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING LT STRING WHILE
##
## Ends in an error in state: 135.
##
## condition -> expr LT expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING LT WHILE
##
## Ends in an error in state: 134.
##
## condition -> expr LT . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN STRING WHILE
##
## Ends in an error in state: 133.
##
## condition -> expr . BEQUALS expr [ RPAREN ]
## condition -> expr . BNEQUALS expr [ RPAREN ]
## condition -> expr . GT expr [ RPAREN ]
## condition -> expr . GE expr [ RPAREN ]
## condition -> expr . LT expr [ RPAREN ]
## condition -> expr . LE expr [ RPAREN ]
## expr -> expr . DIV expr [ TIMES PLUS MOD MINUS LT LE GT GE DIV BNEQUALS BEQUALS ]
## expr -> expr . TIMES expr [ TIMES PLUS MOD MINUS LT LE GT GE DIV BNEQUALS BEQUALS ]
## expr -> expr . PLUS expr [ TIMES PLUS MOD MINUS LT LE GT GE DIV BNEQUALS BEQUALS ]
## expr -> expr . MINUS expr [ TIMES PLUS MOD MINUS LT LE GT GE DIV BNEQUALS BEQUALS ]
## expr -> expr . MOD expr [ TIMES PLUS MOD MINUS LT LE GT GE DIV BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 54.
##
## stmt -> WHILE LPAREN . condition RPAREN block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LBRACE WHILE WHILE
##
## Ends in an error in state: 53.
##
## stmt -> WHILE . LPAREN condition RPAREN block [ WHILE RETURN RBRACE PRINTLN PRINT PASS LET IF ID ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LSQUARE RSQUARE LSQUARE WHILE
##
## Ends in an error in state: 28.
##
## array_type -> array_type LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## array_type LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LSQUARE RSQUARE WHILE
##
## Ends in an error in state: 27.
##
## any_type -> array_type . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> array_type . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## array_type
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID LSQUARE WHILE
##
## Ends in an error in state: 7.
##
## array_type -> T_VOID LSQUARE . RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_VOID LSQUARE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID SEMICOLON
##
## Ends in an error in state: 51.
##
## func -> FUNC ID params any_type . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params any_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 6, spurious reduction of production any_type -> T_VOID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN T_VOID WHILE
##
## Ends in an error in state: 6.
##
## any_type -> T_VOID . [ SEMICOLON RPAREN LBRACE EQUALS COMMA ]
## array_type -> T_VOID . LSQUARE RSQUARE [ SEMICOLON RPAREN LSQUARE LBRACE EQUALS COMMA ]
##
## The known suffix of the stack is as follows:
## T_VOID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 50.
##
## func -> FUNC ID params . any_type block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID LPAREN WHILE
##
## Ends in an error in state: 40.
##
## params -> LPAREN . param_list RPAREN [ T_VOID T_STRING T_INT T_FLOAT T_CHAR T_BOOL STRUCT_ID ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC ID WHILE
##
## Ends in an error in state: 39.
##
## func -> FUNC ID . params any_type block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: FUNC WHILE
##
## Ends in an error in state: 38.
##
## func -> FUNC . ID params any_type block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID LBRACE ID COLON STRUCT_ID SEMICOLON WHILE
##
## Ends in an error in state: 32.
##
## list(struct_field) -> struct_field . list(struct_field) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## struct_field
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID LBRACE ID COLON T_VOID RPAREN
##
## Ends in an error in state: 30.
##
## struct_field -> ID COLON any_type . SEMICOLON [ RBRACE ID ]
##
## The known suffix of the stack is as follows:
## ID COLON any_type
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 6, spurious reduction of production any_type -> T_VOID 
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID LBRACE ID COLON WHILE
##
## Ends in an error in state: 5.
##
## struct_field -> ID COLON . any_type SEMICOLON [ RBRACE ID ]
##
## The known suffix of the stack is as follows:
## ID COLON
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID LBRACE ID WHILE
##
## Ends in an error in state: 4.
##
## struct_field -> ID . COLON any_type SEMICOLON [ RBRACE ID ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID LBRACE RBRACE WHILE
##
## Ends in an error in state: 192.
##
## list(_struct) -> _struct . list(_struct) [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## _struct
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID LBRACE WHILE
##
## Ends in an error in state: 3.
##
## _struct -> STRUCT STRUCT_ID LBRACE . list(struct_field) RBRACE [ STRUCT FUNC EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT STRUCT_ID LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT STRUCT_ID WHILE
##
## Ends in an error in state: 2.
##
## _struct -> STRUCT STRUCT_ID . LBRACE list(struct_field) RBRACE [ STRUCT FUNC EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT STRUCT_ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: STRUCT WHILE
##
## Ends in an error in state: 1.
##
## _struct -> STRUCT . STRUCT_ID LBRACE list(struct_field) RBRACE [ STRUCT FUNC EOF ]
##
## The known suffix of the stack is as follows:
## STRUCT
##

<YOUR SYNTAX ERROR MESSAGE HERE>

prog: WHILE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>

