prog: ID EQUALS ID RPAREN
##
## Ends in an error in state: 25.
##
## stmt -> assignment . SEMICOLON [ PRINT ID EOF ]
##
## The known suffix of the stack is as follows:
## assignment
##
## WARNING: This example involves spurious reductions.
## This implies that, although the LR(1) items shown above provide an
## accurate view of the past (what has been recognized so far), they
## may provide an INCOMPLETE view of the future (what was expected next).
## In state 20, spurious reduction of production assignment -> ID EQUALS expr
##

state25

prog: ID EQUALS TIMES
##
## Ends in an error in state: 19.
##
## assignment -> ID EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

state19

prog: ID TIMES
##
## Ends in an error in state: 18.
##
## assignment -> ID . EQUALS expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID
##

state18

prog: PRINT INT DIV TIMES
##
## Ends in an error in state: 14.
##
## expr -> expr DIV . expr [ TIMES SEMICOLON RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

state14

prog: PRINT INT MINUS TIMES
##
## Ends in an error in state: 9.
##
## expr -> expr MINUS . expr [ TIMES SEMICOLON RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

state9

prog: PRINT INT PLUS TIMES
##
## Ends in an error in state: 12.
##
## expr -> expr PLUS . expr [ TIMES SEMICOLON RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

Missing right hand value for binary operator

prog: PRINT INT RPAREN
##
## Ends in an error in state: 16.
##
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MINUS DIV ]
## stmt -> PRINT expr . SEMICOLON [ PRINT ID EOF ]
##
## The known suffix of the stack is as follows:
## PRINT expr
##

state16

prog: PRINT INT SEMICOLON TIMES
##
## Ends in an error in state: 23.
##
## list(stmt) -> stmt . list(stmt) [ EOF ]
##
## The known suffix of the stack is as follows:
## stmt
##

state23

prog: PRINT INT TIMES TIMES
##
## Ends in an error in state: 7.
##
## expr -> expr TIMES . expr [ TIMES SEMICOLON RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

state7

prog: PRINT LPAREN INT SEMICOLON
##
## Ends in an error in state: 6.
##
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MINUS DIV ]
## expr -> LPAREN expr . RPAREN [ TIMES SEMICOLON RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

state6

prog: PRINT LPAREN TIMES
##
## Ends in an error in state: 2.
##
## expr -> LPAREN . expr RPAREN [ TIMES SEMICOLON RPAREN PLUS MINUS DIV ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

state2

prog: PRINT TIMES
##
## Ends in an error in state: 1.
##
## stmt -> PRINT . expr SEMICOLON [ PRINT ID EOF ]
##
## The known suffix of the stack is as follows:
## PRINT
##

state1

prog: TIMES
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

state0
