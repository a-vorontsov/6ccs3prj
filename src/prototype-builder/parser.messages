prog: FUNC ID LPAREN ID COMMA WHILE
##
## Ends in an error in state: 9.
##
## separated_nonempty_list(COMMA,param) -> param COMMA . separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>9

prog: FUNC ID LPAREN ID WHILE
##
## Ends in an error in state: 8.
##
## separated_nonempty_list(COMMA,param) -> param . [ RPAREN ]
## separated_nonempty_list(COMMA,param) -> param . COMMA separated_nonempty_list(COMMA,param) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## param
##

<YOUR SYNTAX ERROR MESSAGE HERE>8

prog: FUNC ID LPAREN RPAREN LBRACE ID EQUALS INT WHILE
##
## Ends in an error in state: 63.
##
## assignment -> ID EQUALS expr . [ SEMICOLON ]
## expr -> expr . DIV expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES SEMICOLON PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## ID EQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>63

prog: FUNC ID LPAREN RPAREN LBRACE ID EQUALS WHILE
##
## Ends in an error in state: 62.
##
## assignment -> ID EQUALS . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID EQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>62

prog: FUNC ID LPAREN RPAREN LBRACE ID LPAREN INT COMMA WHILE
##
## Ends in an error in state: 60.
##
## separated_nonempty_list(COMMA,expr) -> expr COMMA . separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr COMMA
##

<YOUR SYNTAX ERROR MESSAGE HERE>60

prog: FUNC ID LPAREN RPAREN LBRACE ID LPAREN INT WHILE
##
## Ends in an error in state: 59.
##
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV COMMA ]
## separated_nonempty_list(COMMA,expr) -> expr . [ RPAREN ]
## separated_nonempty_list(COMMA,expr) -> expr . COMMA separated_nonempty_list(COMMA,expr) [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>59

prog: FUNC ID LPAREN RPAREN LBRACE ID LPAREN WHILE
##
## Ends in an error in state: 55.
##
## stmt -> ID LPAREN . loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>55

prog: FUNC ID LPAREN RPAREN LBRACE ID WHILE
##
## Ends in an error in state: 54.
##
## assignment -> ID . EQUALS expr [ SEMICOLON ]
## stmt -> ID . LPAREN loption(separated_nonempty_list(COMMA,expr)) RPAREN [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>54

prog: FUNC ID LPAREN RPAREN LBRACE IF LPAREN INT BEQUALS ID RPAREN LBRACE RBRACE ELSE WHILE
##
## Ends in an error in state: 52.
##
## stmt -> IF LPAREN condition RPAREN block ELSE . block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN block ELSE
##

<YOUR SYNTAX ERROR MESSAGE HERE>52

prog: FUNC ID LPAREN RPAREN LBRACE IF LPAREN INT BEQUALS ID RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 51.
##
## stmt -> IF LPAREN condition RPAREN block . ELSE block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN block
##

<YOUR SYNTAX ERROR MESSAGE HERE>51

prog: FUNC ID LPAREN RPAREN LBRACE IF LPAREN INT BEQUALS ID RPAREN WHILE
##
## Ends in an error in state: 50.
##
## stmt -> IF LPAREN condition RPAREN . block ELSE block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## IF LPAREN condition RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>50

prog: FUNC ID LPAREN RPAREN LBRACE IF LPAREN WHILE
##
## Ends in an error in state: 48.
##
## stmt -> IF LPAREN . condition RPAREN block ELSE block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## IF LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>48

prog: FUNC ID LPAREN RPAREN LBRACE IF WHILE
##
## Ends in an error in state: 47.
##
## stmt -> IF . LPAREN condition RPAREN block ELSE block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## IF
##

<YOUR SYNTAX ERROR MESSAGE HERE>47

prog: FUNC ID LPAREN RPAREN LBRACE PASS SEMICOLON TIMES
##
## Ends in an error in state: 68.
##
## list(line) -> line . list(line) [ RBRACE ]
##
## The known suffix of the stack is as follows:
## line
##

<YOUR SYNTAX ERROR MESSAGE HERE>68

prog: FUNC ID LPAREN RPAREN LBRACE PASS WHILE
##
## Ends in an error in state: 64.
##
## line -> stmt . SEMICOLON [ WHILE RBRACE PRINT PASS IF ID ]
##
## The known suffix of the stack is as follows:
## stmt
##

<YOUR SYNTAX ERROR MESSAGE HERE>64

prog: FUNC ID LPAREN RPAREN LBRACE PRINT INT DIV WHILE
##
## Ends in an error in state: 28.
##
## expr -> expr DIV . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr DIV
##

<YOUR SYNTAX ERROR MESSAGE HERE>28

prog: FUNC ID LPAREN RPAREN LBRACE PRINT INT MINUS WHILE
##
## Ends in an error in state: 30.
##
## expr -> expr MINUS . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr MINUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>30

prog: FUNC ID LPAREN RPAREN LBRACE PRINT INT MOD WHILE
##
## Ends in an error in state: 26.
##
## expr -> expr MOD . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr MOD
##

<YOUR SYNTAX ERROR MESSAGE HERE>26

prog: FUNC ID LPAREN RPAREN LBRACE PRINT INT PLUS WHILE
##
## Ends in an error in state: 24.
##
## expr -> expr PLUS . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr PLUS
##

<YOUR SYNTAX ERROR MESSAGE HERE>24

prog: FUNC ID LPAREN RPAREN LBRACE PRINT INT TIMES WHILE
##
## Ends in an error in state: 21.
##
## expr -> expr TIMES . expr [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr TIMES
##

<YOUR SYNTAX ERROR MESSAGE HERE>21

prog: FUNC ID LPAREN RPAREN LBRACE PRINT LPAREN INT WHILE
##
## Ends in an error in state: 20.
##
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> LPAREN expr . RPAREN [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>20

prog: FUNC ID LPAREN RPAREN LBRACE PRINT LPAREN WHILE
##
## Ends in an error in state: 16.
##
## expr -> LPAREN . expr RPAREN [ TIMES SEMICOLON RPAREN PLUS MOD MINUS LT GT DIV COMMA BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>16

prog: FUNC ID LPAREN RPAREN LBRACE PRINT WHILE
##
## Ends in an error in state: 44.
##
## stmt -> PRINT . expr [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## PRINT
##

<YOUR SYNTAX ERROR MESSAGE HERE>44

prog: FUNC ID LPAREN RPAREN LBRACE RBRACE WHILE
##
## Ends in an error in state: 75.
##
## list(func) -> func . list(func) [ EOF ]
##
## The known suffix of the stack is as follows:
## func
##

<YOUR SYNTAX ERROR MESSAGE HERE>75

prog: FUNC ID LPAREN RPAREN LBRACE TIMES
##
## Ends in an error in state: 13.
##
## block -> LBRACE . list(line) RBRACE [ SEMICOLON FUNC EOF ELSE ]
##
## The known suffix of the stack is as follows:
## LBRACE
##

<YOUR SYNTAX ERROR MESSAGE HERE>13

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT BEQUALS ID RPAREN WHILE
##
## Ends in an error in state: 42.
##
## stmt -> WHILE LPAREN condition RPAREN . block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN condition RPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>42

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT BEQUALS INT WHILE
##
## Ends in an error in state: 40.
##
## condition -> expr BEQUALS expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr BEQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>40

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT BEQUALS WHILE
##
## Ends in an error in state: 39.
##
## condition -> expr BEQUALS . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr BEQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>39

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT BNEQUALS INT WHILE
##
## Ends in an error in state: 38.
##
## condition -> expr BNEQUALS expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr BNEQUALS expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>38

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT BNEQUALS WHILE
##
## Ends in an error in state: 37.
##
## condition -> expr BNEQUALS . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr BNEQUALS
##

<YOUR SYNTAX ERROR MESSAGE HERE>37

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT GT INT WHILE
##
## Ends in an error in state: 36.
##
## condition -> expr GT expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr GT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>36

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT GT WHILE
##
## Ends in an error in state: 35.
##
## condition -> expr GT . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr GT
##

<YOUR SYNTAX ERROR MESSAGE HERE>35

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT LT INT WHILE
##
## Ends in an error in state: 34.
##
## condition -> expr LT expr . [ RPAREN ]
## expr -> expr . DIV expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . TIMES expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . PLUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MINUS expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
## expr -> expr . MOD expr [ TIMES RPAREN PLUS MOD MINUS DIV ]
##
## The known suffix of the stack is as follows:
## expr LT expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>34

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT LT WHILE
##
## Ends in an error in state: 33.
##
## condition -> expr LT . expr [ RPAREN ]
##
## The known suffix of the stack is as follows:
## expr LT
##

<YOUR SYNTAX ERROR MESSAGE HERE>33

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN INT WHILE
##
## Ends in an error in state: 32.
##
## condition -> expr . BEQUALS expr [ RPAREN ]
## condition -> expr . BNEQUALS expr [ RPAREN ]
## condition -> expr . GT expr [ RPAREN ]
## condition -> expr . LT expr [ RPAREN ]
## expr -> expr . DIV expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . TIMES expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . PLUS expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . MINUS expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
## expr -> expr . MOD expr [ TIMES PLUS MOD MINUS LT GT DIV BNEQUALS BEQUALS ]
##
## The known suffix of the stack is as follows:
## expr
##

<YOUR SYNTAX ERROR MESSAGE HERE>32

prog: FUNC ID LPAREN RPAREN LBRACE WHILE LPAREN WHILE
##
## Ends in an error in state: 15.
##
## stmt -> WHILE LPAREN . condition RPAREN block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## WHILE LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>15

prog: FUNC ID LPAREN RPAREN LBRACE WHILE WHILE
##
## Ends in an error in state: 14.
##
## stmt -> WHILE . LPAREN condition RPAREN block [ SEMICOLON ]
##
## The known suffix of the stack is as follows:
## WHILE
##

<YOUR SYNTAX ERROR MESSAGE HERE>14

prog: FUNC ID LPAREN RPAREN WHILE
##
## Ends in an error in state: 12.
##
## func -> FUNC ID params . block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID params
##

<YOUR SYNTAX ERROR MESSAGE HERE>12

prog: FUNC ID LPAREN WHILE
##
## Ends in an error in state: 3.
##
## params -> LPAREN . param_list RPAREN [ LBRACE ]
##
## The known suffix of the stack is as follows:
## LPAREN
##

<YOUR SYNTAX ERROR MESSAGE HERE>3

prog: FUNC ID WHILE
##
## Ends in an error in state: 2.
##
## func -> FUNC ID . params block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC ID
##

<YOUR SYNTAX ERROR MESSAGE HERE>2

prog: FUNC WHILE
##
## Ends in an error in state: 1.
##
## func -> FUNC . ID params block [ FUNC EOF ]
##
## The known suffix of the stack is as follows:
## FUNC
##

<YOUR SYNTAX ERROR MESSAGE HERE>1

prog: WHILE
##
## Ends in an error in state: 0.
##
## prog' -> . prog [ # ]
##
## The known suffix of the stack is as follows:
##
##

<YOUR SYNTAX ERROR MESSAGE HERE>0
